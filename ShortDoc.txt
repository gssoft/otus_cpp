Название Проектной работы:
"Эволюция программного кода для регистрации сообщений".

Аннотация к проектам
---------------------------------
1. Ca_01_ConsoleLogger_01 – проект
----------------------------------
Реализация примитивного ConsoleLogger
ConsoleLogger — это инструмент для логгирования, который предоставляет
средства для записи сообщений в консоль с различными уровнями важности и временными метками.
Его основная задача заключается в облегчении процесса отладки и документирования выполнения программы.
Это отдельный, минималистический модуль, который отличается простотой использования и гибкостью настройки.
----------------------------------
2. Ca_02_LoggerService_01
------------------------- --------
Реализация ConsoleLogger + Service (Исполнение)
ConsoleLogger работает в контексте Service с одним потоком выполнения.
Service<ConsoleLogger> — это программа, которая дополняет функционал
ConsoleLogger функциональностью сервиса.
Основная задача этой программы — демонстрация взаимодействия
ConsoleLogger (поведение) с компонентом Service(Исполнение).
Service представляет собой функциональную единицу, которая предоставляет поток выполнения
для ConsoleLogger, который выполняет логирование.
--------------------------------------
3. Проект: Ca_03_LoggerInThreadPool_01
--------------------------------------
Программа LoggerInThreadPool использует компонент Service<ConsoleLogger> из предыдущнго проекта. 
Демонстрируется работа log_service
 - в контексте основной программы main()
 - в контексте THreadPool - логировать используя только свой поток 
и не использовать внутренние потоки ThreadPool
------------------------------------------------------------------
4. Проект Ca_04_SingleExecutor_01
------------------------------------------------------------------
В этом проекте появляется SingleExecutor 
и еще боллее четко сделано разделение на
Поведение (ConsoleLogger) и Исполнение (SingleExecutor) 
Реализация SingleExecutor - Исполнитель с одним потоком
Реализация ConsoleLogger - Логер для регистрации сообщений в Консоли
----------------------------------------------------------------------
Проект Ca_05_Logger_Executor_In_Service_01
----------------------------------------------------------------------
В этом проекте применяется "шаблонная магия"
ConsoleLogger(Поведение) и SingleThreadExecutor(Исполнение) объединяются в
Wrapper c именем LogService.
Было так:
SingleExecutor executor(logger);
Стало вот так:
LogService<ConsoleLogger, SingleThreadExecutor> log_service;
Теперь легко и непринужденно можно менять и Поведение и Исполнение
при помощи других разработанных классов.
-------------------------------------------------------
Проект Ca_06_MultiLogger_01
------------------------------------------------------
Пришло время усилить Logger.
В этом проекте мы значительно усиливаем фукциональность Logger.
Был ConsoleLogger Стал Logger c разными типами Логеров:
ConsoleLogger: Печатает логи в консоль с возможностью настройки формата и включения/отключения логов.
MemoryLogger: Сохраняет логи в оперативной памяти с ограничением на количество записей.
FileLogger: Сохраняет логи в файл, поддерживает создание и чтение логов из файла.
Logger - Центральный менеджер логирования.
-------------------------------------------------------------
Проект Ca_07_MultiLogService_02
-------------------------------------------------------------
В этом проекте мы переименовываем Logger в MultiLogger.
И при помощи шаблонной магии
Создаем MultiLogService, связывая MultiLogger и SingleThreadExecutor в Wrapper c именем MultiLogService
Было так:
LogService<ConsoleLogger, SingleThreadExecutor> log_sevice;
Стало вот так:
MultiLogService<MultiLogger, SingleThreadExecutor> multi_log_service;
--------------------------------------------------------------------------------------
Проект Ca_08_MultiLogServiceAdvanced_01
---------------------------------------------------------------------------------------
В этом проекте усиливаем Executor
Для этого разрабатываем компонент MultiSequentialExecutor.
И опять применям шаблонную магию получаем
Было так:
MultiLogService<MultiLogger, SingleThreadExecutor> multi_log_service;
Стало так:
MultiLogServiceAdvanced<MultiLogger, MultiSequentialExecutor> multi_log_service_adv(3);
MultiLogger c исполнением каждого Logger-а в своем отдельном потоке.
--------------------------------------------------------------------------------------

